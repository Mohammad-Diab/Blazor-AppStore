@if (IsShown && !(currentItem is null))
{
    <div class="modal @(IsShown ? "show d-block" : "")" tabindex="-1" role="dialog">
        <div style="z-index: unset;" class="modal-backdrop @(IsShown ? "show" : "d-none")" @onclick="FocusModal"></div>
        <div class="modal-dialog modal-lg modal-dialog-centered animate__animated animate__faster @AnimateClassName" role="document">
            <div class="modal-content animate__animated animate__fast @FocusClassName">
                <div class="modal-header">
                    <h5 class="modal-title" id="exampleModalLabel">@currentItem.Name</h5>
                    <button type="button" class="close" @onclick="Close" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div style="max-height: calc(100vh - 200px); overflow: auto;" class="modal-body">
                    <ViewFile item="@currentItem" />
                </div>
                @if (currentItem.Size > 1073741823) /* 1 GiB */
                {
                    <div class="text-center mb-2 font-weight-light">
                        <span class="oi oi-task mr-1 text-info"></span>
                        <span>For more file downloading process reliability, you can use</span>
                        <a class="inline-link" target="_blank" href="@($"{Config.ApiUrl}DownloadFDM")" download>Free Download Manager</a>
                        <span> .</span>
                    </div>
                }
                <div style="justify-content: center;" class="modal-footer text-center">
                    <a style="min-width: 120px" class="btn btn-success" target="_blank" href="@($"{Config.ApiUrl}DownloadFile?FileId={currentItem.Id}")" download>Download</a>
                    @if (currentItem.Type == SharedLibraries.ItemType.ISO)
                    {
                        <button style="min-width: 120px" type="button" class="btn btn-primary" @onclick="MountISO" disabled>Mount ISO</button>
                    }
                </div>
            </div>
        </div>
    </div>
}

@code{

    [Parameter] public ModalShowAnimation ShowAnimation { get; set; }
    AppItem currentItem { get; set; }

    ModalConfirmButton ConfirmType { get; set; }

    bool IsShown = false;

    string AnimateClassName = "animate__bounceIn";
    string entrancesAnimationName = "animate__zoomIn";
    string emphasisAnimationName = "animate__tada";
    string exitsAnimationName = "animate__bounceOut";
    string FocusClassName = "";

    DialogResult Result = DialogResult.Undefiend;

    bool IsAnimating = false;

    public async Task<DialogResult> ShowModal(AppItem item)
    {
        currentItem = item;
        AnimateClassName = entrancesAnimationName;

        Result = DialogResult.Undefiend;

        IsShown = true;

        StateHasChanged();

        while (Result == DialogResult.Undefiend)
        {
            await Task.Delay(50);
        }

        return Result;
    }

    public async void FocusModal()
    {

        if (IsAnimating)
        {
            return;
        }

        IsAnimating = true;

        FocusClassName = emphasisAnimationName;

        await Task.Delay(600);

        FocusClassName = "";

        IsAnimating = false;

        StateHasChanged();
    }


    public async void CloseModal()
    {

        AnimateClassName = exitsAnimationName;

        await Task.Delay(500);

        IsShown = false;

        StateHasChanged();

        AnimateClassName = entrancesAnimationName;
    }

    public void Download()
    {
        using HttpClient request = new HttpClient();
        _ = request.GetStreamAsync($"{Config.ApiUrl}DownloadFile?FileId={currentItem.Id}");
        Close();
        //using (var dd = new System.IO.StreamWriter(System.IO.File.OpenWrite("file1.txt")))
        //{
        //    int i = 0;
        //    while (i < 20)
        //    {
        //        dd.WriteLine($"Hi There {i}.");
        //        i++;
        //    }
        //    dd.Close();
        //    using (var f = System.IO.File.OpenText("file1.txt"))
        //    {
        //        Console.WriteLine(f.ReadToEnd());
        //        f.Close();
        //    }
        //}
    }

    public void MountISO()
    {
        Console.WriteLine("Mounting ISO...");
    }

    public void Close()
    {
        CloseModal();
    }
}